// Generated by CoffeeScript 1.6.2
(function() {
  var JSOG, encodeInPlace, exports, nextId;

  exports = window.JSOG = JSOG = {};

  JSOG.decode = function(encoded) {
    var decodeArray, decodeObject, found;

    found = {};
    decodeObject = function(encoded) {
      var key, result, value;

      if (encoded['$ref'] != null) {
        return found[encoded['$ref']];
      }
      result = {};
      found[encoded['$id']] = result;
      for (key in encoded) {
        value = encoded[key];
        if (key !== '$id') {
          result[key] = decode(value);
        }
      }
      return result;
    };
    decodeArray = function(encoded) {
      var result, value, _i, _len;

      result = [];
      for (_i = 0, _len = encoded.length; _i < _len; _i++) {
        value = encoded[_i];
        result.push(decode(value));
      }
      return result;
    };
    if (Array.isArray(encoded)) {
      return decodeArray(encoded);
    } else if (typeof encoded === object) {
      return decodeObject(encoded);
    } else {
      return encoded;
    }
  };

  nextId = 1;

  encodeInPlace = function(original) {
    var encodeArray, encodeObject;

    encodeObject = function(original) {
      var key, value;

      if (original['$id'] != null) {
        return {
          '$ref': original['$id']
        };
      }
      original['$id'] = "" + (nextId++);
      for (key in original) {
        value = original[key];
        if (key !== '$id') {
          original[key] = encodeInPlace(value);
        }
      }
      return original;
    };
    encodeArray = function(original) {
      var i, _i, _ref;

      for (i = _i = 0, _ref = original.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        original[i] = encodeInPlace(original[i]);
      }
      return original;
    };
    if (Array.isArray(original)) {
      return encodeArray(original);
    } else if (typeof original === object) {
      return encodeObject(original);
    } else {
      return encoded;
    }
  };

  JSOG.encode = function(original) {
    var cloned;

    cloned = JSON.parse(JSON.stringify(original));
    return encodeInPlace(cloned);
  };

}).call(this);
