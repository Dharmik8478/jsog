// Generated by CoffeeScript 1.6.2
(function() {
  var JSOG, assert, inside, outside, roundtrip;

  assert = require('assert');

  JSOG = require('../lib/JSOG');

  inside = {
    name: 'thing'
  };

  outside = {
    inside1: inside,
    inside2: inside
  };

  describe('no id should be set', function() {
    it('should not have added an id to outside', function() {
      return assert(!(outside['$id'] != null));
    });
    return it('should not have added an id to inside', function() {
      return assert(!(inside['$id'] != null));
    });
  });

  describe('decoded should work', function() {
    var decoded, encoded;

    encoded = JSOG.encode(outside);
    decoded = JSOG.decode(encoded);
    console.log("Encoded is:");
    console.log(JSON.stringify(encoded, void 0, 4));
    console.log("Outside after encoding is:");
    console.log(JSON.stringify(outside, void 0, 4));
    console.log("Decoded is:");
    console.log(JSON.stringify(decoded, void 0, 4));
    it('inside1 and inside2 should be equal', function() {
      return assert(decoded.inside1 === decoded.inside2);
    });
    it('should have inside1.name', function() {
      return assert(decoded.inside1.name === 'thing');
    });
    return it('should not have an @id', function() {
      return assert(!(decoded['@id'] != null));
    });
  });

  roundtrip = JSOG.parse(JSOG.stringify(outside));

  console.log("Roundtrip is:");

  console.log(JSON.stringify(roundtrip, void 0, 4));

  describe('cyclic references', function() {
    var circular, decoded, encoded;

    circular = {};
    circular.me = circular;
    encoded = JSOG.encode(circular);
    decoded = JSOG.decode(encoded);
    console.log("Encoded: " + JSON.stringify(encoded, void 0, 4));
    it('should have an encoded id', function() {
      return assert(encoded['@id'] != null);
    });
    it('should have resolved references', function() {
      return assert(encoded.me['@ref'] === encoded['@id']);
    });
    it('me is decoded', function() {
      return assert(decoded.me === decoded);
    });
    return it('is not circular', function() {
      return assert(!(circular['@id'] != null));
    });
  });

}).call(this);
